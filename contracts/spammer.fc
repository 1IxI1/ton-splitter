#include "imports/stdlib.fc";
#include "imports/messages.fc";
#include "imports/utils.fc";

;; spammer_data#_ spammer_id:uint32
;;                factory:Address counterparty:Address
;;                end_spam_at:uint48 = Storage;

(int, slice, slice, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32), ;; my_id
        ds~load_msg_addr(), ;; factory
        ds~load_msg_addr(), ;; counterparty (zero by default)
        ds~load_uint(48) ;; end_spam_at (zero by default)
    );
}

() save_data(int my_id, slice factory, slice counterparty, int end_spam_at) impure inline {
    cell new_data = pack_spammer_data(my_id, factory, counterparty, end_spam_at);
    set_data(new_data);
}

const int min_balance = 100000000; ;; 0.1 TON

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int in_msg_flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    (int my_id, slice factory, slice counterparty, int end_spam_at) = load_data();

    ;; the only non-bounced message to handle 
    ;; is the init message
    ifnot (in_msg_flags & 1) {
        int op = in_msg_body~load_uint(32);

        if (op == op::spammm) { ;; spam from our counterparty
            throw(666);
        }

        int query_id = in_msg_body~load_uint(64);

        throw_unless(404, op == op::init_spammer);
        throw_unless(401, equal_slices(sender_address, factory));

        counterparty = in_msg_body~load_msg_addr();
        end_spam_at = in_msg_body~load_uint(48);

        save_data(my_id, factory, counterparty, end_spam_at);
        ;; no return - starting spam
    }

    check_spam_config();

    if (now() >= end_spam_at) {
        return ();
    }

    raw_reserve(min_balance, REVERT_ON_ERRORS);
    var msg = begin_cell().store_msg_flag(msg_flag::bounceable)
                          .store_slice(counterparty)
                          .store_coins(0)
                          .store_msgbody_prefix_slice()
                          .store_uint(op::spammm, 32)
               .end_cell();

    send_raw_message(msg, CARRY_REMAINING_BALANCE);
    return ();
}

slice get_owner() method_id {
    (_, slice factory, _, _) = load_data();
    return factory;
}
